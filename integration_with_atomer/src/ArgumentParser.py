import argparse
import os
import sys


class MyArgumentParser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(
            description=(
                "This script processes output from the Infer Atomer plugin and creates a config "
                "for the ANaConDA framework.\n\n The Atomer plugin outputs its results into a 'report.json' file "
                "after analyzing a given program. \n\n This script takes that output and generates a configuration file "
                "which can then be passed to the ANaConDA framework to enhance the effectiveness of the analysis, "
                "because only the functions with possible atomicity violations will be analyzed.\n\n"
                "For more details on how to provide your own config and how the configuration affects "
                "ANaConDA's behavior, see the README of the ANaConDA framework."
            )
        )
        self.parser.add_argument(
            "--base_config_dir",
            default="./base_conf",
            help="Path to the base config configuration directory (default: ./base_conf). "
                 "This configuration will be used as a base configuration, from which a new one will be created "
                 "with updated filter/ins/exclude and filter/ins/include files."
        )
        self.parser.add_argument(
            "--result_config_dir",
            default="./out_confs",
            help="Path to the directory, where the newly created config dir will be saved (default: ./out_conf)"
        )
        self.parser.add_argument(
            "--atomer_outputs_dir",
            required=True,
            help="Path to the directory with outputs generated by Atomer. For our example it would be "
                 "example/atomer_outputs. Only .json files will be taken into account."
        )

    def parse_args(self):
        args = self.parser.parse_args()
        self.verify_arguments(args)
        return args

    @staticmethod
    def ensure_result_config_dir_exists(args):
        """Ensures that the result config directory exists; if not, creates it."""
        if not os.path.exists(args.result_config_dir):
            print(f"Result config directory '{args.result_config_dir}' does not exist. Creating it...")
            os.makedirs(args.result_config_dir)
        elif not os.path.isdir(args.result_config_dir):
            print(f"Error: '{args.result_config_dir}' exists but is not a directory.", file=sys.stderr)
            sys.exit(1)

    @staticmethod
    def verify_arguments(args):
        """Checks that all provided paths exist."""
        paths_to_check = {
            "Base config directory": args.base_config_dir,
            "Atomer outputs directory": args.atomer_outputs_dir,
        }

        errors = []
        for label, path in paths_to_check.items():
            if "file" in label.lower():
                if not os.path.isfile(path):
                    errors.append(f"{label} does not exist or is not a file: {path}")
            else:
                if not os.path.isdir(path):
                    errors.append(f"{label} does not exist or is not a directory: {path}")

        if errors:
            for err in errors:
                print(f"Error: {err}", file=sys.stderr)
            sys.exit(1)
