LibDIE (Debugging Information Extraction library)
=================================================
LibDIE is a library for extracting debugging information from binary files. It
wraps the libdwarf library on Linux to provide an object interface for working
with the debugging information in a simpler (and object-oriented) way.

LibDIE is licensed under GPLv3+, see COPYING for details.

Building the library
====================

(1) Install all dependencies
----------------------------
  * C++ compiler
    - The library supports GCC 4.9.3+, but other compilers should also work
    - On Linux, usually provided by package called 'g++', 'c++', 'gcc-g++',
      or 'gcc-c++', sometimes also with a suffix representing the version

  * CMake 2.8.3+
    - Available at http://www.cmake.org
    - On Linux, usually provided by package called 'cmake'

  * Boost 1.46+ development headers
    - Available at http://www.boost.org
    - On Linux, usually provided by package called 'boost' or 'boost-devel'

  * libdwarf library
    - Available at http://www.prevanders.net/dwarf.html
    - On Linux, usually provided by package 'libdwarf'
    - It is recommended to compile the libdwarf library from sources as its
      internal headers are also required for building LibDIE. This prevents
      potential problems of using internal headers from a different version
      of the library than the one that is available as a package installed.

  * libdwarf internal headers
    - Available at http://www.prevanders.net/dwarf.html
    - The following internal headers are needed:
      - libdwarf/config.h (generated by the configure script)
      - libdwarf/dwarf_alloc.h
      - libdwarf/dwarf_base_types.h
      - libdwarf/dwarf_opaque.h
      - libdwarf/libdwarfdefs.h
    - The configure script present in the newer versions of libdwarf does
      not generate libdwarf/config.h, only config.h in the root directory.
      To fix this problem, either copy config.h to the libdwarf directory,
      or use CMake (instead of the configure script) to generate it. Cmake
      generates both config.h and libdwarf/config.h configuration headers.
    - Set the LIBDWARF_HOME environment variable to point to the directory
      where the internal headers are (if they are not in a directory that
      is searched for header files)

(2) Build the library
---------------------
To build the library (and install it), use the following command:

    make && make install

By default, the library is built in the 'build' subdirectory and installed to
the 'local' subdirectory. To change the build and/or installation directory,
use the BUILD_DIR and/or INSTALL_DIR variables, respectively, e.g., use the
following command to install the library to the '/usr' directory:

    make INSTALL_DIR=/usr && make install

The header files will be stored in the 'include' subdirectory, while the library
files will be stored, depending on the target architecture for which the library
was built, in the 'lib' or 'lib64' subdirectory (on Linux) or the 'lib/win32' or
'lib/win64' subdirectory (on Windows). To change these directories, one can use
the following variables:

  * INSTALL_INCLUDEDIR
    - A full path to a directory (or a relative path to a subdirectory of the
      INSTALL_DIR directory) where to install the header files

  * INSTALL_LIBDIR
    - A full path to a directory (or a relative path to a subdirectory of the
      INSTALL_DIR directory) where to install the library files

Removing the library
====================
To remove the library (uninstall it and delete all files created by the build
system), use the following command:

    make uninstall distclean

If a custom build directory was specified when building the library, the same
build directory must be specified when removing the library!
